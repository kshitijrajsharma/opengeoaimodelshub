services:
  mlflow-web:
    build:
      context: .
      dockerfile: dockerfile.mlflow
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    environment:
      MLFLOW_S3_ENDPOINT_URL: "http://minio:9000"
      MLFLOW_S3_IGNORE_TLS: "true"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID:-mlflow}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY:-mlflow123}"
    entrypoint: mlflow server --backend-store-uri postgresql+psycopg2://${POSTGRES_USER:-mlflow}:${POSTGRES_PASSWORD:-mlflow123}@postgres/${POSTGRES_DB:-mlflow} --default-artifact-root s3://${MINIO_BUCKET_NAME:-mlflow}/ --artifacts-destination s3://${MINIO_BUCKET_NAME:-mlflow}/ -h 0.0.0.0
    depends_on:
      - minio
      - postgres
    networks:
      - mlflow-network

  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-8900}:8900"
    environment:
      MINIO_ACCESS_KEY: "${AWS_ACCESS_KEY_ID:-mlflow}"
      MINIO_SECRET_KEY: "${AWS_SECRET_ACCESS_KEY:-mlflow123}"
    volumes:
      - "mlflow-minio:/data/minio"
      # - ./entrypoints/minio.sh:/minio.sh
    # entrypoint: ["sh", "-c", "chmod +x /minio.sh && /minio.sh"]

    command: 'minio server /data/minio --console-address ":8900"'
    networks:
      - mlflow-network

  postgres:
    image: postgres:16-alpine
    ports:
      - "${POSTGRES_PORT:-5434}:5432"
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-mlflow}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-mlflow123}"
      POSTGRES_DB: "${POSTGRES_DB:-mlflow}"
    volumes:
      - "mlflow-postgres:/var/lib/postgresql/data"
    networks:
      - mlflow-network

networks:
  mlflow-network:
    name: mlflow-network
    driver: bridge

volumes:
  mlflow-minio:
    driver: local
  mlflow-postgres:
    driver: local
